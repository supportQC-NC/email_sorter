"""
Email Manager pour Thunderbird V3 - Gestionnaire d'emails avec tri automatique avanc√©
Version am√©lior√©e avec cha√Ænes de r√®gles et gestion des dossiers existants
Compatible avec tous les serveurs IMAP (Orange, Free, Hostinger, etc.)
"""

import tkinter as tk
from tkinter import ttk, messagebox, scrolledtext, filedialog
import imaplib
import email
from email.header import decode_header
import threading
from datetime import datetime, timedelta
import json
import os
import re
import copy
import platform
from pathlib import Path

class EmailManager:
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("ü¶Ö Email Manager pour Thunderbird - V3")
        self.root.geometry("1300x850")
        self.root.configure(bg='#2c3e50')
        
        # Cr√©er le dossier de donn√©es
        self.setup_data_directory()
        
        # Variables
        self.connection = None
        self.rules = []
        self.rule_chains = []
        self.is_running = False
        self.folder_separator = "."
        self.use_inbox_prefix = True
        self.processed_emails = set()
        self.existing_folders = []
        
        # Interface
        self.setup_ui()
        
        # Charger configuration
        self.load_settings()
        
        # Fermeture
        self.root.protocol("WM_DELETE_WINDOW", self.on_closing)
    
    def setup_data_directory(self):
        """Cr√©er le dossier de donn√©es au premier lancement"""
        # D√©terminer le chemin selon l'OS
        if platform.system() == 'Windows':
            # Sur Windows, utiliser le disque C:\Users\[username]\
            base_path = Path.home() / "support_data_email_sort"
        else:
            # Sur Linux/Mac, utiliser le home directory
            base_path = Path.home() / ".support_data_email_sort"
        
        # Cr√©er le dossier s'il n'existe pas
        base_path.mkdir(parents=True, exist_ok=True)
        
        # D√©finir le chemin du fichier de configuration
        self.config_file = base_path / "email_manager_settings.json"
        self.rules_backup_file = base_path / "rules_backup.json"
        self.chains_file = base_path / "rule_chains.json"
        
        # Log du chemin
        print(f"üìÅ Dossier de donn√©es: {base_path}")
        print(f"üìÑ Fichier de configuration: {self.config_file}")
    
    def setup_ui(self):
        """Cr√©er l'interface utilisateur compl√®te"""
        
        # Style moderne
        style = ttk.Style()
        style.theme_use('clam')
        
        # Container principal
        main_frame = tk.Frame(self.root, bg='#ecf0f1')
        main_frame.pack(fill='both', expand=True, padx=2, pady=2)
        
        # === HEADER ===
        header = tk.Frame(main_frame, bg='#0a84ff', height=100)
        header.pack(fill='x')
        header.pack_propagate(False)
        
        # Titre avec ic√¥ne
        title_frame = tk.Frame(header, bg='#0a84ff')
        title_frame.pack(expand=True)
        
        tk.Label(title_frame, text="ü¶Ö", font=("Arial", 40), 
                bg='#0a84ff', fg='white').pack(side='left', padx=10)
        
        title_text = tk.Frame(title_frame, bg='#0a84ff')
        title_text.pack(side='left')
        
        tk.Label(title_text, text="Email Manager pour Thunderbird V3", 
                font=("Arial", 26, "bold"), 
                bg='#0a84ff', fg='white').pack(anchor='w')
        
        tk.Label(title_text, text="Tri automatique avanc√© avec cha√Ænes de r√®gles et gestion des dossiers", 
                font=("Arial", 12), 
                bg='#0a84ff', fg='#ecf0f1').pack(anchor='w')
        
        # === NOTEBOOK (Onglets) ===
        notebook = ttk.Notebook(main_frame)
        notebook.pack(fill='both', expand=True, padx=10, pady=10)
        
        # --- ONGLET 1: CONNEXION ---
        self.setup_connection_tab(notebook)
        
        # --- ONGLET 2: GESTION CC ---
        self.setup_cc_tab(notebook)
        
        # --- ONGLET 3: R√àGLES PERSONNALIS√âES ---
        self.setup_rules_tab(notebook)
        
        # --- ONGLET 4: CHA√éNES DE R√àGLES ---
        self.setup_rule_chains_tab(notebook)
        
        # --- ONGLET 5: DOSSIERS EXISTANTS ---
        self.setup_folders_tab(notebook)
        
        # --- ONGLET 6: OPTIONS AVANC√âES ---
        self.setup_advanced_tab(notebook)
        
        # --- ONGLET 7: EX√âCUTION ---
        self.setup_execution_tab(notebook)
        
        # Barre de statut
        self.status_var = tk.StringVar(value="‚úÖ Pr√™t - Email Manager V3")
        status_bar = tk.Label(self.root, textvariable=self.status_var,
                             bd=1, relief=tk.SUNKEN, anchor='w',
                             bg='#34495e', fg='white',
                             font=("Arial", 10))
        status_bar.pack(side='bottom', fill='x')
        
        # Initialisation
        self.log("‚ú® Email Manager V3 d√©marr√©!", "success")
        self.log(f"üìÅ Dossier de donn√©es: {self.config_file.parent}", "info")
        self.log("üîí Les emails ne seront PAS marqu√©s comme lus lors du tri", "warning")
        self.log("üìå Compatible avec tous les serveurs IMAP", "info")
    
    def setup_connection_tab(self, notebook):
        """Onglet de connexion"""
        conn_frame = tk.Frame(notebook, bg='white')
        notebook.add(conn_frame, text=' üîå Connexion ')
        
        conn_content = tk.Frame(conn_frame, bg='white')
        conn_content.pack(fill='both', expand=True, padx=20, pady=20)
        
        # Configuration serveur
        server_frame = tk.LabelFrame(conn_content, text=" Configuration serveur IMAP ", 
                                    font=("Arial", 12, "bold"),
                                    bg='white', fg='#2c3e50', relief=tk.FLAT)
        server_frame.pack(fill='x', pady=(0, 20))
        
        # Exemples de serveurs
        examples_frame = tk.Frame(server_frame, bg='#e8f4f8')
        examples_frame.pack(fill='x', padx=10, pady=10)
        
        tk.Label(examples_frame, 
                text="üìå Serveurs IMAP courants:",
                font=("Arial", 11, "bold"), bg='#e8f4f8', fg='#0a84ff').pack(anchor='w', padx=10, pady=(5, 5))
        
        examples_text = """‚Ä¢ Orange: imap.orange.fr (port 993)          ‚Ä¢ Free: imap.free.fr (port 993)
‚Ä¢ SFR: imap.sfr.fr (port 993)               ‚Ä¢ Bbox: imap.bbox.fr (port 993)
‚Ä¢ LaPoste: imap.laposte.net (port 993)      ‚Ä¢ Hostinger: imap.hostinger.com (port 993)
‚Ä¢ OVH: ssl0.ovh.net (port 993)              ‚Ä¢ Gmail: imap.gmail.com (port 993)"""
        
        tk.Label(examples_frame, text=examples_text,
                font=("Arial", 9), bg='#e8f4f8', fg='#2c3e50',
                justify='left').pack(anchor='w', padx=20, pady=(0, 10))
        
        server_grid = tk.Frame(server_frame, bg='white')
        server_grid.pack(pady=15, padx=10)
        
        tk.Label(server_grid, text="Serveur IMAP:", font=("Arial", 11), 
                bg='white', width=15, anchor='e').grid(row=0, column=0, padx=5, pady=5)
        
        self.server_var = tk.StringVar(value="")
        self.server_entry = tk.Entry(server_grid, textvariable=self.server_var, 
                                    font=("Arial", 11), width=25)
        self.server_entry.grid(row=0, column=1, padx=5, pady=5)
        
        tk.Label(server_grid, text="Port:", font=("Arial", 11), 
                bg='white', width=8, anchor='e').grid(row=0, column=2, padx=5, pady=5)
        
        self.port_var = tk.StringVar(value="993")
        self.port_entry = tk.Entry(server_grid, textvariable=self.port_var, 
                                  font=("Arial", 11), width=8)
        self.port_entry.grid(row=0, column=3, padx=5, pady=5)
        
        # Identifiants
        creds_frame = tk.LabelFrame(conn_content, text=" Identifiants ", 
                                   font=("Arial", 12, "bold"),
                                   bg='white', fg='#2c3e50', relief=tk.FLAT)
        creds_frame.pack(fill='x', pady=(0, 20))
        
        creds_grid = tk.Frame(creds_frame, bg='white')
        creds_grid.pack(pady=15, padx=10)
        
        tk.Label(creds_grid, text="Email:", font=("Arial", 11), 
                bg='white', width=15, anchor='e').grid(row=0, column=0, padx=5, pady=10)
        
        self.email_var = tk.StringVar()
        self.email_entry = tk.Entry(creds_grid, textvariable=self.email_var, 
                                   font=("Arial", 11), width=35)
        self.email_entry.grid(row=0, column=1, padx=5, pady=10)
        
        tk.Label(creds_grid, text="Mot de passe:", font=("Arial", 11), 
                bg='white', width=15, anchor='e').grid(row=1, column=0, padx=5, pady=10)
        
        self.password_var = tk.StringVar()
        self.password_entry = tk.Entry(creds_grid, textvariable=self.password_var, 
                                      font=("Arial", 11), width=35, show="‚Ä¢")
        self.password_entry.grid(row=1, column=1, padx=5, pady=10)
        
        # Option importante : Pr√©servation du statut non-lu
        preserve_frame = tk.Frame(conn_content, bg='#fff3cd', relief=tk.RIDGE, bd=2)
        preserve_frame.pack(fill='x', pady=10)
        
        self.preserve_unread_var = tk.BooleanVar(value=True)
        tk.Checkbutton(preserve_frame, 
                      text=" üîí TOUJOURS pr√©server le statut non-lu des emails lors du tri",
                      variable=self.preserve_unread_var,
                      font=("Arial", 11, "bold"),
                      bg='#fff3cd', fg='#856404',
                      activebackground='#fff3cd').pack(anchor='w', padx=10, pady=8)
        
        # Boutons
        buttons_frame = tk.Frame(conn_content, bg='white')
        buttons_frame.pack(pady=20)
        
        self.test_btn = tk.Button(buttons_frame, text=" üîß Tester la connexion ",
                                 font=("Arial", 12, "bold"),
                                 bg='#0a84ff', fg='white',
                                 padx=30, pady=10,
                                 command=self.test_connection,
                                 cursor='hand2')
        self.test_btn.pack(side='left', padx=10)
        
        self.load_folders_btn = tk.Button(buttons_frame, text=" üìÅ Charger les dossiers ",
                                         font=("Arial", 12, "bold"),
                                         bg='#27ae60', fg='white',
                                         padx=30, pady=10,
                                         command=self.load_existing_folders,
                                         cursor='hand2')
        self.load_folders_btn.pack(side='left', padx=10)
    
    def setup_cc_tab(self, notebook):
        """Onglet de gestion des CC"""
        cc_frame = tk.Frame(notebook, bg='white')
        notebook.add(cc_frame, text=' üìã Gestion CC ')
        
        cc_content = tk.Frame(cc_frame, bg='white')
        cc_content.pack(fill='both', expand=True, padx=20, pady=20)
        
        # Configuration CC
        cc_config = tk.LabelFrame(cc_content, 
                                 text=" ‚öôÔ∏è Configuration des emails en copie (CC) ", 
                                 font=("Arial", 12, "bold"),
                                 bg='white', fg='#2c3e50', relief=tk.FLAT)
        cc_config.pack(fill='x', pady=(0, 20))
        
        cc_inner = tk.Frame(cc_config, bg='white')
        cc_inner.pack(pady=20, padx=20)
        
        # Activation CC
        activation_frame = tk.Frame(cc_inner, bg='#e8f8f5', relief=tk.RIDGE, bd=2)
        activation_frame.pack(fill='x', pady=10)
        
        self.cc_enabled_var = tk.BooleanVar(value=True)
        cc_check = tk.Checkbutton(activation_frame, 
                                 text=" ‚úÖ Activer le tri automatique des emails o√π je suis en copie (CC)",
                                 variable=self.cc_enabled_var,
                                 font=("Arial", 12, "bold"),
                                 bg='#e8f8f5', fg='#27ae60',
                                 activebackground='#e8f8f5',
                                 command=self.toggle_cc_options)
        cc_check.pack(anchor='w', padx=10, pady=10)
        
        # Options CC
        self.cc_options_frame = tk.Frame(cc_inner, bg='#ecf0f1')
        self.cc_options_frame.pack(fill='x', pady=10)
        
        folder_frame = tk.Frame(self.cc_options_frame, bg='#ecf0f1')
        folder_frame.pack(pady=10)
        
        tk.Label(folder_frame, text="üìÅ Dossier de destination pour les emails en CC:", 
                font=("Arial", 11), bg='#ecf0f1').pack(side='left', padx=10)
        
        self.cc_folder_var = tk.StringVar(value="EN_COPIE")
        self.cc_folder_entry = tk.Entry(folder_frame, 
                                       textvariable=self.cc_folder_var,
                                       font=("Arial", 11, "bold"), width=25,
                                       bg='#ffffff', fg='#2c3e50')
        self.cc_folder_entry.pack(side='left', padx=5)
        
        # Options suppl√©mentaires CC
        extra_options = tk.Frame(self.cc_options_frame, bg='#ecf0f1')
        extra_options.pack(fill='x', pady=10, padx=20)
        
        self.cc_mark_read_after_var = tk.BooleanVar(value=False)
        tk.Checkbutton(extra_options, 
                      text=" üìñ Marquer comme lu APR√àS d√©placement (optionnel)",
                      variable=self.cc_mark_read_after_var,
                      font=("Arial", 10), bg='#ecf0f1').pack(anchor='w', pady=5)
        
        self.cc_skip_important_var = tk.BooleanVar(value=True)
        tk.Checkbutton(extra_options, 
                      text=" ‚≠ê Ne pas d√©placer les emails marqu√©s comme importants",
                      variable=self.cc_skip_important_var,
                      font=("Arial", 10), bg='#ecf0f1').pack(anchor='w', pady=5)
        
        self.cc_skip_recent_var = tk.BooleanVar(value=False)
        tk.Checkbutton(extra_options, 
                      text=" üïê Ne pas d√©placer les emails de moins de 24h",
                      variable=self.cc_skip_recent_var,
                      font=("Arial", 10), bg='#ecf0f1').pack(anchor='w', pady=5)
        
        # Info box
        info_frame = tk.Frame(cc_content, bg='#d4edda', relief=tk.RIDGE, bd=2)
        info_frame.pack(fill='x', pady=10)
        
        tk.Label(info_frame, text="‚ÑπÔ∏è Comment √ßa marche ?", 
                font=("Arial", 11, "bold"), 
                bg='#d4edda', fg='#155724').pack(anchor='w', padx=10, pady=(10, 5))
        
        info_text = """‚úÖ Les emails o√π vous √™tes le destinataire principal ‚Üí RESTENT dans la bo√Æte de r√©ception
‚úÖ Les emails o√π vous √™tes uniquement en copie (CC) ‚Üí D√âPLAC√âS vers le dossier configur√©
üîí Le statut non-lu est TOUJOURS pr√©serv√© (sauf si option explicite)
‚úÖ Le dossier sera cr√©√© automatiquement s'il n'existe pas"""
        
        tk.Label(info_frame, text=info_text,
                font=("Arial", 10), bg='#d4edda', 
                fg='#155724', justify='left').pack(anchor='w', padx=25, pady=(0, 10))
    
    def setup_rules_tab(self, notebook):
        """Onglet des r√®gles personnalis√©es am√©lior√© avec priorit√©s"""
        rules_frame = tk.Frame(notebook, bg='white')
        notebook.add(rules_frame, text=' üéØ R√®gles ')
        
        rules_content = tk.Frame(rules_frame, bg='white')
        rules_content.pack(fill='both', expand=True, padx=20, pady=20)
        
        # Cr√©er r√®gle
        create_rule_frame = tk.LabelFrame(rules_content, 
                                         text=" ‚ûï Cr√©er une nouvelle r√®gle de tri ", 
                                         font=("Arial", 12, "bold"),
                                         bg='white', fg='#2c3e50', relief=tk.FLAT)
        create_rule_frame.pack(fill='x', pady=(0, 20))
        
        rule_builder = tk.Frame(create_rule_frame, bg='white')
        rule_builder.pack(pady=15, padx=15)
        
        # Ligne 0 - Nom et priorit√©
        line0 = tk.Frame(rule_builder, bg='white')
        line0.pack(fill='x', pady=5)
        
        tk.Label(line0, text="Nom de la r√®gle:", font=("Arial", 11, "bold"), bg='white').pack(side='left', padx=5)
        
        self.rule_name_var = tk.StringVar()
        name_entry = tk.Entry(line0, textvariable=self.rule_name_var, 
                             width=30, font=("Arial", 11))
        name_entry.pack(side='left', padx=5)
        
        tk.Label(line0, text="Priorit√©:", font=("Arial", 11, "bold"), bg='white').pack(side='left', padx=10)
        
        self.rule_priority_var = tk.StringVar(value="50")
        priority_spinbox = tk.Spinbox(line0, from_=1, to=100, 
                                      textvariable=self.rule_priority_var,
                                      width=8, font=("Arial", 11))
        priority_spinbox.pack(side='left', padx=5)
        
        tk.Label(line0, text="(1=haute, 100=basse)", 
                font=("Arial", 9, "italic"), bg='white', fg='gray').pack(side='left')
        
        # Ligne 1 - Condition principale
        line1 = tk.Frame(rule_builder, bg='white')
        line1.pack(fill='x', pady=5)
        
        tk.Label(line1, text="Si", font=("Arial", 11, "bold"), bg='white').pack(side='left', padx=5)
        
        self.rule_field_var = tk.StringVar(value="Sujet")
        field_menu = ttk.Combobox(line1, textvariable=self.rule_field_var,
                                  values=["Sujet", "Exp√©diteur", "Corps", "Destinataire", 
                                         "Sujet ou Corps", "Domaine exp√©diteur"],
                                  width=18, state='readonly')
        field_menu.pack(side='left', padx=5)
        
        self.rule_condition_var = tk.StringVar(value="contient")
        condition_menu = ttk.Combobox(line1, textvariable=self.rule_condition_var,
                                      values=["contient", "ne contient pas", "commence par", 
                                              "finit par", "est exactement", "n'est pas", 
                                              "correspond √† (regex)", "contient un de (liste)"],
                                      width=20, state='readonly')
        condition_menu.pack(side='left', padx=5)
        
        self.rule_keyword_var = tk.StringVar()
        keyword_entry = tk.Entry(line1, textvariable=self.rule_keyword_var, 
                                width=30, font=("Arial", 11))
        keyword_entry.pack(side='left', padx=5)
        
        # Ligne 2 - Conditions additionnelles
        line2 = tk.Frame(rule_builder, bg='white')
        line2.pack(fill='x', pady=5)
        
        tk.Label(line2, text="ET (optionnel):", font=("Arial", 11), bg='white').pack(side='left', padx=5)
        
        self.rule_and_field_var = tk.StringVar(value="")
        and_field_menu = ttk.Combobox(line2, textvariable=self.rule_and_field_var,
                                      values=["", "Sujet", "Exp√©diteur", "Corps", "Destinataire"],
                                      width=15, state='readonly')
        and_field_menu.pack(side='left', padx=5)
        
        self.rule_and_condition_var = tk.StringVar(value="contient")
        and_condition_menu = ttk.Combobox(line2, textvariable=self.rule_and_condition_var,
                                          values=["contient", "ne contient pas", "commence par", 
                                                  "finit par", "est exactement"],
                                          width=18, state='readonly')
        and_condition_menu.pack(side='left', padx=5)
        
        self.rule_and_keyword_var = tk.StringVar()
        and_keyword_entry = tk.Entry(line2, textvariable=self.rule_and_keyword_var, 
                                     width=25, font=("Arial", 11))
        and_keyword_entry.pack(side='left', padx=5)
        
        # Ligne 3 - Options
        line3 = tk.Frame(rule_builder, bg='white')
        line3.pack(fill='x', pady=5)
        
        tk.Label(line3, text="Options:", font=("Arial", 11, "bold"), bg='white').pack(side='left', padx=5)
        
        self.rule_case_sensitive_var = tk.BooleanVar(value=False)
        tk.Checkbutton(line3, text="Sensible √† la casse",
                      variable=self.rule_case_sensitive_var,
                      font=("Arial", 10), bg='white').pack(side='left', padx=5)
        
        self.rule_continue_chain_var = tk.BooleanVar(value=False)
        tk.Checkbutton(line3, text="Peut continuer vers d'autres r√®gles",
                      variable=self.rule_continue_chain_var,
                      font=("Arial", 10), bg='white').pack(side='left', padx=10)
        
        # Ligne 4 - Action
        line4 = tk.Frame(rule_builder, bg='white')
        line4.pack(fill='x', pady=5)
        
        tk.Label(line4, text="Alors", font=("Arial", 11, "bold"), bg='white').pack(side='left', padx=5)
        
        self.rule_action_var = tk.StringVar(value="D√©placer vers")
        action_menu = ttk.Combobox(line4, textvariable=self.rule_action_var,
                                   values=["D√©placer vers", "Copier vers", "Marquer comme lu", 
                                          "Marquer comme important", "Supprimer", "√âtiqueter"],
                                   width=18, state='readonly')
        action_menu.pack(side='left', padx=5)
        action_menu.bind('<<ComboboxSelected>>', self.on_action_changed)
        
        self.rule_folder_var = tk.StringVar()
        self.folder_entry = tk.Entry(line4, textvariable=self.rule_folder_var, 
                                     width=25, font=("Arial", 11))
        self.folder_entry.pack(side='left', padx=5)
        
        # Dropdown pour les dossiers existants
        self.folder_dropdown = ttk.Combobox(line4, values=self.existing_folders,
                                           width=25, state='readonly')
        self.folder_dropdown.pack(side='left', padx=5)
        self.folder_dropdown.bind('<<ComboboxSelected>>', self.on_folder_selected)
        
        # Ligne 5 - Options d'action
        line5 = tk.Frame(rule_builder, bg='white')
        line5.pack(fill='x', pady=5)
        
        self.rule_stop_processing_var = tk.BooleanVar(value=False)
        tk.Checkbutton(line5, text=" üõë Arr√™ter le traitement apr√®s cette r√®gle",
                      variable=self.rule_stop_processing_var,
                      font=("Arial", 10), bg='white').pack(side='left', padx=5)
        
        self.rule_mark_after_move_var = tk.BooleanVar(value=False)
        self.mark_checkbox = tk.Checkbutton(line5, 
                                           text=" üìñ Marquer comme lu apr√®s action",
                                           variable=self.rule_mark_after_move_var,
                                           font=("Arial", 10), bg='white')
        self.mark_checkbox.pack(side='left', padx=15)
        
        # Bouton ajouter
        add_btn_frame = tk.Frame(rule_builder, bg='white')
        add_btn_frame.pack(fill='x', pady=10)
        
        add_rule_btn = tk.Button(add_btn_frame, text=" ‚ûï Ajouter la r√®gle ",
                                bg='#27ae60', fg='white',
                                font=("Arial", 11, "bold"),
                                command=self.add_custom_rule,
                                cursor='hand2')
        add_rule_btn.pack()
        
        # Liste des r√®gles
        rules_list_frame = tk.LabelFrame(rules_content, 
                                        text=" üìã R√®gles actives (tri√©es par priorit√©) ", 
                                        font=("Arial", 12, "bold"),
                                        bg='white', fg='#2c3e50', relief=tk.FLAT)
        rules_list_frame.pack(fill='both', expand=True)
        
        # Frame avec scrollbar
        list_container = tk.Frame(rules_list_frame, bg='white')
        list_container.pack(fill='both', expand=True, padx=10, pady=10)
        
        # Treeview pour afficher les r√®gles
        columns = ('Nom', 'Priorit√©', 'Champ', 'Condition', 'Valeur', 'Action', 'Options')
        self.rules_tree = ttk.Treeview(list_container, columns=columns, show='tree headings', height=8)
        
        # Configuration des colonnes
        self.rules_tree.heading('#0', text='#')
        self.rules_tree.column('#0', width=40)
        
        for col in columns:
            self.rules_tree.heading(col, text=col)
            width = 120 if col in ['Valeur', 'Options'] else 100
            if col == 'Nom':
                width = 150
            self.rules_tree.column(col, width=width)
        
        # Scrollbars
        vsb = ttk.Scrollbar(list_container, orient="vertical", command=self.rules_tree.yview)
        hsb = ttk.Scrollbar(list_container, orient="horizontal", command=self.rules_tree.xview)
        self.rules_tree.configure(yscrollcommand=vsb.set, xscrollcommand=hsb.set)
        
        self.rules_tree.grid(row=0, column=0, sticky='nsew')
        vsb.grid(row=0, column=1, sticky='ns')
        hsb.grid(row=1, column=0, sticky='ew')
        
        list_container.grid_rowconfigure(0, weight=1)
        list_container.grid_columnconfigure(0, weight=1)
        
        # Boutons de gestion des r√®gles
        rules_btns = tk.Frame(rules_list_frame, bg='white')
        rules_btns.pack(fill='x', padx=10, pady=10)
        
        tk.Button(rules_btns, text=" ‚úèÔ∏è Modifier ",
                 bg='#f39c12', fg='white',
                 font=("Arial", 10, "bold"),
                 command=self.edit_rule).pack(side='left', padx=5)
        
        tk.Button(rules_btns, text=" üìã Dupliquer ",
                 bg='#3498db', fg='white',
                 font=("Arial", 10, "bold"),
                 command=self.duplicate_rule).pack(side='left', padx=5)
        
        tk.Button(rules_btns, text=" üóëÔ∏è Supprimer ",
                 bg='#e74c3c', fg='white',
                 font=("Arial", 10, "bold"),
                 command=self.delete_rule).pack(side='left', padx=5)
        
        tk.Button(rules_btns, text=" üì• Importer ",
                 bg='#95a5a6', fg='white',
                 font=("Arial", 10, "bold"),
                 command=self.import_rules).pack(side='left', padx=20)
        
        tk.Button(rules_btns, text=" üì§ Exporter ",
                 bg='#95a5a6', fg='white',
                 font=("Arial", 10, "bold"),
                 command=self.export_rules).pack(side='left', padx=5)
    
    def setup_rule_chains_tab(self, notebook):
        """Onglet pour cr√©er des cha√Ænes de r√®gles"""
        chains_frame = tk.Frame(notebook, bg='white')
        notebook.add(chains_frame, text=' ‚õìÔ∏è Cha√Ænes ')
        
        chains_content = tk.Frame(chains_frame, bg='white')
        chains_content.pack(fill='both', expand=True, padx=20, pady=20)
        
        # Cr√©er une cha√Æne
        create_chain_frame = tk.LabelFrame(chains_content, 
                                          text=" ‚õìÔ∏è Cr√©er une cha√Æne de r√®gles ", 
                                          font=("Arial", 12, "bold"),
                                          bg='white', fg='#2c3e50', relief=tk.FLAT)
        create_chain_frame.pack(fill='x', pady=(0, 20))
        
        chain_builder = tk.Frame(create_chain_frame, bg='white')
        chain_builder.pack(pady=15, padx=15)
        
        # Nom de la cha√Æne
        name_frame = tk.Frame(chain_builder, bg='white')
        name_frame.pack(fill='x', pady=5)
        
        tk.Label(name_frame, text="Nom de la cha√Æne:", 
                font=("Arial", 11, "bold"), bg='white').pack(side='left', padx=5)
        
        self.chain_name_var = tk.StringVar()
        chain_name_entry = tk.Entry(name_frame, textvariable=self.chain_name_var,
                                    width=30, font=("Arial", 11))
        chain_name_entry.pack(side='left', padx=5)
        
        tk.Label(name_frame, text="Priorit√© globale:", 
                font=("Arial", 11, "bold"), bg='white').pack(side='left', padx=10)
        
        self.chain_priority_var = tk.StringVar(value="50")
        chain_priority_spinbox = tk.Spinbox(name_frame, from_=1, to=100,
                                           textvariable=self.chain_priority_var,
                                           width=8, font=("Arial", 11))
        chain_priority_spinbox.pack(side='left', padx=5)
        
        # S√©lection des r√®gles
        selection_frame = tk.Frame(chain_builder, bg='white')
        selection_frame.pack(fill='both', expand=True, pady=10)
        
        # R√®gles disponibles
        tk.Label(selection_frame, text="R√®gles disponibles:", 
                font=("Arial", 11, "bold"), bg='white').pack(anchor='w')
        
        available_frame = tk.Frame(selection_frame, bg='white')
        available_frame.pack(fill='both', expand=True)
        
        self.available_rules_listbox = tk.Listbox(available_frame, height=6,
                                                  font=("Arial", 10))
        self.available_rules_listbox.pack(side='left', fill='both', expand=True)
        
        # Boutons de transfert
        transfer_btns = tk.Frame(selection_frame, bg='white')
        transfer_btns.pack(side='left', padx=10)
        
        tk.Button(transfer_btns, text=" ‚Üí ",
                 command=self.add_rule_to_chain,
                 font=("Arial", 12, "bold")).pack(pady=5)
        
        tk.Button(transfer_btns, text=" ‚Üê ",
                 command=self.remove_rule_from_chain,
                 font=("Arial", 12, "bold")).pack(pady=5)
        
        # R√®gles dans la cha√Æne
        tk.Label(selection_frame, text="R√®gles dans la cha√Æne (ordre d'ex√©cution):", 
                font=("Arial", 11, "bold"), bg='white').pack(anchor='w')
        
        chain_frame = tk.Frame(selection_frame, bg='white')
        chain_frame.pack(fill='both', expand=True)
        
        self.chain_rules_listbox = tk.Listbox(chain_frame, height=6,
                                              font=("Arial", 10))
        self.chain_rules_listbox.pack(side='left', fill='both', expand=True)
        
        # Boutons d'ordre
        order_btns = tk.Frame(chain_frame, bg='white')
        order_btns.pack(side='left', padx=5)
        
        tk.Button(order_btns, text=" ‚Üë ",
                 command=self.move_chain_rule_up,
                 font=("Arial", 10)).pack(pady=2)
        
        tk.Button(order_btns, text=" ‚Üì ",
                 command=self.move_chain_rule_down,
                 font=("Arial", 10)).pack(pady=2)
        
        # Options de la cha√Æne
        chain_options = tk.Frame(chain_builder, bg='white')
        chain_options.pack(fill='x', pady=10)
        
        self.chain_stop_on_match_var = tk.BooleanVar(value=True)
        tk.Checkbutton(chain_options, 
                      text=" üõë Arr√™ter la cha√Æne √† la premi√®re r√®gle correspondante",
                      variable=self.chain_stop_on_match_var,
                      font=("Arial", 10), bg='white').pack(anchor='w')
        
        self.chain_enabled_var = tk.BooleanVar(value=True)
        tk.Checkbutton(chain_options, 
                      text=" ‚úÖ Cha√Æne active",
                      variable=self.chain_enabled_var,
                      font=("Arial", 10), bg='white').pack(anchor='w')
        
        # Bouton cr√©er cha√Æne
        create_chain_btn = tk.Button(chain_builder, text=" ‚õìÔ∏è Cr√©er la cha√Æne ",
                                    bg='#27ae60', fg='white',
                                    font=("Arial", 11, "bold"),
                                    command=self.create_rule_chain,
                                    cursor='hand2')
        create_chain_btn.pack(pady=10)
        
        # Liste des cha√Ænes
        chains_list_frame = tk.LabelFrame(chains_content, 
                                         text=" üìã Cha√Ænes de r√®gles actives ", 
                                         font=("Arial", 12, "bold"),
                                         bg='white', fg='#2c3e50', relief=tk.FLAT)
        chains_list_frame.pack(fill='both', expand=True)
        
        # Treeview pour les cha√Ænes
        self.chains_tree = ttk.Treeview(chains_list_frame, height=6)
        self.chains_tree.pack(fill='both', expand=True, padx=10, pady=10)
        
        # Boutons de gestion des cha√Ænes
        chains_btns = tk.Frame(chains_list_frame, bg='white')
        chains_btns.pack(fill='x', padx=10, pady=10)
        
        tk.Button(chains_btns, text=" ‚úèÔ∏è Modifier ",
                 bg='#f39c12', fg='white',
                 font=("Arial", 10, "bold"),
                 command=self.edit_chain).pack(side='left', padx=5)
        
        tk.Button(chains_btns, text=" üóëÔ∏è Supprimer ",
                 bg='#e74c3c', fg='white',
                 font=("Arial", 10, "bold"),
                 command=self.delete_chain).pack(side='left', padx=5)
        
        tk.Button(chains_btns, text=" üîÑ Activer/D√©sactiver ",
                 bg='#3498db', fg='white',
                 font=("Arial", 10, "bold"),
                 command=self.toggle_chain).pack(side='left', padx=5)
    
    def setup_folders_tab(self, notebook):
        """Onglet pour g√©rer les dossiers existants"""
        folders_frame = tk.Frame(notebook, bg='white')
        notebook.add(folders_frame, text=' üìÅ Dossiers ')
        
        folders_content = tk.Frame(folders_frame, bg='white')
        folders_content.pack(fill='both', expand=True, padx=20, pady=20)
        
        # Configuration des dossiers √† trier
        folders_config = tk.LabelFrame(folders_content, 
                                      text=" üìÅ Gestion des dossiers existants ", 
                                      font=("Arial", 12, "bold"),
                                      bg='white', fg='#2c3e50', relief=tk.FLAT)
        folders_config.pack(fill='both', expand=True)
        
        # Instructions
        instructions = tk.Frame(folders_config, bg='#e8f4f8')
        instructions.pack(fill='x', padx=10, pady=10)
        
        tk.Label(instructions, 
                text="üìå Configurez ici les dossiers existants que vous souhaitez organiser automatiquement",
                font=("Arial", 11, "bold"), bg='#e8f4f8', fg='#0a84ff').pack(anchor='w', padx=10, pady=5)
        
        tk.Label(instructions,
                text="‚Ä¢ S√©lectionnez les dossiers √† analyser en plus de la bo√Æte de r√©ception\n"
                     "‚Ä¢ Les r√®gles d√©finies s'appliqueront aussi √† ces dossiers\n"
                     "‚Ä¢ Utile pour r√©organiser des emails d√©j√† tri√©s manuellement",
                font=("Arial", 10), bg='#e8f4f8', fg='#2c3e50',
                justify='left').pack(anchor='w', padx=20, pady=5)
        
        # Frame principal
        main_folders_frame = tk.Frame(folders_config, bg='white')
        main_folders_frame.pack(fill='both', expand=True, padx=15, pady=15)
        
        # Liste des dossiers disponibles
        available_label = tk.Label(main_folders_frame, 
                                  text="Dossiers disponibles sur le serveur:",
                                  font=("Arial", 11, "bold"), bg='white')
        available_label.pack(anchor='w', pady=5)
        
        # Frame pour la liste avec scrollbar
        list_frame = tk.Frame(main_folders_frame, bg='white')
        list_frame.pack(fill='both', expand=True, pady=10)
        
        scrollbar = tk.Scrollbar(list_frame)
        scrollbar.pack(side='right', fill='y')
        
        self.folders_listbox = tk.Listbox(list_frame, 
                                         selectmode='multiple',
                                         yscrollcommand=scrollbar.set,
                                         font=("Arial", 10),
                                         height=10)
        self.folders_listbox.pack(side='left', fill='both', expand=True)
        scrollbar.config(command=self.folders_listbox.yview)
        
        # Options
        options_frame = tk.Frame(main_folders_frame, bg='white')
        options_frame.pack(fill='x', pady=10)
        
        self.include_inbox_var = tk.BooleanVar(value=True)
        tk.Checkbutton(options_frame, 
                      text=" ‚úÖ Inclure la bo√Æte de r√©ception (INBOX)",
                      variable=self.include_inbox_var,
                      font=("Arial", 11, "bold"),
                      bg='white', fg='#27ae60').pack(anchor='w', pady=5)
        
        self.scan_subfolders_var = tk.BooleanVar(value=False)
        tk.Checkbutton(options_frame, 
                      text=" üìÇ Analyser aussi les sous-dossiers",
                      variable=self.scan_subfolders_var,
                      font=("Arial", 10),
                      bg='white').pack(anchor='w', pady=5)
        
        self.exclude_special_var = tk.BooleanVar(value=True)
        tk.Checkbutton(options_frame, 
                      text=" üö´ Exclure les dossiers sp√©ciaux (Brouillons, Envoy√©s, Corbeille, Spam)",
                      variable=self.exclude_special_var,
                      font=("Arial", 10),
                      bg='white').pack(anchor='w', pady=5)
        
        # Boutons d'action
        buttons_frame = tk.Frame(main_folders_frame, bg='white')
        buttons_frame.pack(fill='x', pady=15)
        
        tk.Button(buttons_frame, text=" üîÑ Actualiser la liste ",
                 bg='#3498db', fg='white',
                 font=("Arial", 11, "bold"),
                 command=self.refresh_folders_list,
                 cursor='hand2').pack(side='left', padx=5)
        
        tk.Button(buttons_frame, text=" ‚úÖ S√©lectionner tout ",
                 bg='#27ae60', fg='white',
                 font=("Arial", 11, "bold"),
                 command=self.select_all_folders,
                 cursor='hand2').pack(side='left', padx=5)
        
        tk.Button(buttons_frame, text=" ‚ùå D√©s√©lectionner tout ",
                 bg='#e74c3c', fg='white',
                 font=("Arial", 11, "bold"),
                 command=self.deselect_all_folders,
                 cursor='hand2').pack(side='left', padx=5)
        
        # Dossiers s√©lectionn√©s
        selected_frame = tk.Frame(main_folders_frame, bg='#d4edda')
        selected_frame.pack(fill='x', pady=10)
        
        tk.Label(selected_frame, text="üìã Dossiers s√©lectionn√©s pour le tri:", 
                font=("Arial", 11, "bold"), 
                bg='#d4edda', fg='#155724').pack(anchor='w', padx=10, pady=5)
        
        self.selected_folders_label = tk.Label(selected_frame, 
                                              text="Aucun dossier s√©lectionn√©",
                                              font=("Arial", 10), 
                                              bg='#d4edda', fg='#155724',
                                              wraplength=600,
                                              justify='left')
        self.selected_folders_label.pack(anchor='w', padx=20, pady=5)
    
    def setup_advanced_tab(self, notebook):
        """Onglet des options avanc√©es"""
        adv_frame = tk.Frame(notebook, bg='white')
        notebook.add(adv_frame, text=' ‚öôÔ∏è Avanc√© ')
        
        adv_content = tk.Frame(adv_frame, bg='white')
        adv_content.pack(fill='both', expand=True, padx=20, pady=20)
        
        # Options de traitement
        processing_frame = tk.LabelFrame(adv_content, 
                                        text=" üîß Options de traitement ", 
                                        font=("Arial", 12, "bold"),
                                        bg='white', fg='#2c3e50', relief=tk.FLAT)
        processing_frame.pack(fill='x', pady=(0, 20))
        
        proc_inner = tk.Frame(processing_frame, bg='white')
        proc_inner.pack(pady=15, padx=15)
        
        # Mode de traitement
        mode_frame = tk.Frame(proc_inner, bg='white')
        mode_frame.pack(fill='x', pady=5)
        
        tk.Label(mode_frame, text="Mode de traitement:", 
                font=("Arial", 11), bg='white').pack(side='left', padx=5)
        
        self.processing_mode_var = tk.StringVar(value="peek")
        tk.Radiobutton(mode_frame, text="PEEK (Ne pas marquer comme lu)",
                      variable=self.processing_mode_var, value="peek",
                      font=("Arial", 10), bg='white').pack(side='left', padx=10)
        
        tk.Radiobutton(mode_frame, text="BODY (Peut marquer comme lu)",
                      variable=self.processing_mode_var, value="body",
                      font=("Arial", 10), bg='white').pack(side='left', padx=10)
        
        # Options de filtrage
        filter_frame = tk.Frame(proc_inner, bg='white')
        filter_frame.pack(fill='x', pady=10)
        
        tk.Label(filter_frame, text="Filtrer les emails:", 
                font=("Arial", 11), bg='white').pack(anchor='w', pady=5)
        
        self.filter_unread_only_var = tk.BooleanVar(value=False)
        tk.Checkbutton(filter_frame, text=" üìß Traiter uniquement les emails non lus",
                      variable=self.filter_unread_only_var,
                      font=("Arial", 10), bg='white').pack(anchor='w', padx=20, pady=2)
        
        self.filter_date_var = tk.BooleanVar(value=False)
        date_check = tk.Checkbutton(filter_frame, text=" üìÖ Traiter uniquement les emails des",
                                   variable=self.filter_date_var,
                                   font=("Arial", 10), bg='white',
                                   command=self.toggle_date_filter)
        date_check.pack(anchor='w', padx=20, pady=2)
        
        date_frame = tk.Frame(filter_frame, bg='white')
        date_frame.pack(anchor='w', padx=40, pady=2)
        
        self.filter_days_var = tk.StringVar(value="7")
        self.days_spinbox = tk.Spinbox(date_frame, from_=1, to=365, 
                                       textvariable=self.filter_days_var,
                                       width=5, font=("Arial", 10), state='disabled')
        self.days_spinbox.pack(side='left', padx=5)
        
        tk.Label(date_frame, text="derniers jours", 
                font=("Arial", 10), bg='white').pack(side='left')
        
        # Options de s√©curit√©
        safety_frame = tk.LabelFrame(adv_content, 
                                    text=" üîí Options de s√©curit√© ", 
                                    font=("Arial", 12, "bold"),
                                    bg='white', fg='#2c3e50', relief=tk.FLAT)
        safety_frame.pack(fill='x', pady=(0, 20))
        
        safety_inner = tk.Frame(safety_frame, bg='white')
        safety_inner.pack(pady=15, padx=15)
        
        self.dry_run_var = tk.BooleanVar(value=False)
        tk.Checkbutton(safety_inner, 
                      text=" üß™ Mode test (simuler sans d√©placer les emails)",
                      variable=self.dry_run_var,
                      font=("Arial", 11, "bold"),
                      bg='white', fg='#e74c3c').pack(anchor='w', pady=5)
        
        self.backup_before_move_var = tk.BooleanVar(value=False)
        tk.Checkbutton(safety_inner, 
                      text=" üíæ Cr√©er une copie de sauvegarde avant d√©placement",
                      variable=self.backup_before_move_var,
                      font=("Arial", 10),
                      bg='white').pack(anchor='w', pady=5)
        
        self.confirm_actions_var = tk.BooleanVar(value=False)
        tk.Checkbutton(safety_inner, 
                      text=" ‚ùì Demander confirmation pour chaque action",
                      variable=self.confirm_actions_var,
                      font=("Arial", 10),
                      bg='white').pack(anchor='w', pady=5)
        
        # Performances
        perf_frame = tk.LabelFrame(adv_content, 
                                  text=" ‚ö° Options de performance ", 
                                  font=("Arial", 12, "bold"),
                                  bg='white', fg='#2c3e50', relief=tk.FLAT)
        perf_frame.pack(fill='x', pady=(0, 20))
        
        perf_inner = tk.Frame(perf_frame, bg='white')
        perf_inner.pack(pady=15, padx=15)
        
        batch_frame = tk.Frame(perf_inner, bg='white')
        batch_frame.pack(fill='x', pady=5)
        
        tk.Label(batch_frame, text="Traiter par lots de:", 
                font=("Arial", 11), bg='white').pack(side='left', padx=5)
        
        self.batch_size_var = tk.StringVar(value="50")
        tk.Spinbox(batch_frame, from_=10, to=500, increment=10,
                  textvariable=self.batch_size_var,
                  width=8, font=("Arial", 11)).pack(side='left', padx=5)
        
        tk.Label(batch_frame, text="emails", 
                font=("Arial", 11), bg='white').pack(side='left')
        
        self.parallel_processing_var = tk.BooleanVar(value=False)
        tk.Checkbutton(perf_inner, 
                      text=" üöÄ Activer le traitement parall√®le (exp√©rimental)",
                      variable=self.parallel_processing_var,
                      font=("Arial", 10),
                      bg='white').pack(anchor='w', pady=5)
    
    def setup_execution_tab(self, notebook):
        """Onglet d'ex√©cution"""
        run_frame = tk.Frame(notebook, bg='white')
        notebook.add(run_frame, text=' ‚ñ∂Ô∏è Ex√©cution ')
        
        run_content = tk.Frame(run_frame, bg='white')
        run_content.pack(fill='both', expand=True, padx=20, pady=20)
        
        # Options d'ex√©cution
        exec_options = tk.LabelFrame(run_content, 
                                    text=" ‚öôÔ∏è Options d'analyse ", 
                                    font=("Arial", 12, "bold"),
                                    bg='white', fg='#2c3e50', relief=tk.FLAT)
        exec_options.pack(fill='x', pady=(0, 20))
        
        options_grid = tk.Frame(exec_options, bg='white')
        options_grid.pack(pady=15, padx=15)
        
        tk.Label(options_grid, text="Nombre max d'emails √† traiter:", 
                font=("Arial", 11), bg='white').pack(side='left', padx=5)
        
        self.max_emails_var = tk.StringVar(value="100")
        tk.Spinbox(options_grid, from_=1, to=10000, 
                  textvariable=self.max_emails_var,
                  width=10, font=("Arial", 11)).pack(side='left', padx=5)
        
        tk.Label(options_grid, text="(0 = tous les emails)", 
                font=("Arial", 9, "italic"), bg='white', fg='gray').pack(side='left')
        
        # Statistiques actuelles
        stats_frame = tk.Frame(run_content, bg='#e8f4f8', relief=tk.RIDGE, bd=2)
        stats_frame.pack(fill='x', pady=10)
        
        tk.Label(stats_frame, text="üìä Statistiques de session", 
                font=("Arial", 11, "bold"), 
                bg='#e8f4f8', fg='#0a84ff').pack(anchor='w', padx=10, pady=(10, 5))
        
        self.stats_label = tk.Label(stats_frame, 
                                   text="Aucune analyse effectu√©e pour le moment",
                                   font=("Arial", 10), 
                                   bg='#e8f4f8', fg='#2c3e50')
        self.stats_label.pack(anchor='w', padx=25, pady=(0, 10))
        
        # Gros bouton analyser
        analyze_frame = tk.Frame(run_content, bg='white')
        analyze_frame.pack(fill='x', pady=20)
        
        self.analyze_btn = tk.Button(analyze_frame, 
                                     text="üöÄ ANALYSER ET TRIER LES EMAILS",
                                     font=("Arial", 18, "bold"),
                                     bg='#e74c3c', fg='white',
                                     padx=40, pady=20,
                                     command=self.start_analysis,
                                     cursor='hand2',
                                     relief=tk.RAISED, bd=3)
        self.analyze_btn.pack()
        
        # Console de logs
        console_frame = tk.LabelFrame(run_content, 
                                     text=" üìä Console d'ex√©cution ", 
                                     font=("Arial", 12, "bold"),
                                     bg='white', fg='#2c3e50', relief=tk.FLAT)
        console_frame.pack(fill='both', expand=True)
        
        self.console = scrolledtext.ScrolledText(console_frame, 
                                                 height=10,
                                                 bg='#1e1e1e', fg='#00ff00',
                                                 font=("Consolas", 10),
                                                 insertbackground='#00ff00')
        self.console.pack(fill='both', expand=True, padx=10, pady=10)
    
    def toggle_cc_options(self):
        """Activer/d√©sactiver les options CC"""
        if self.cc_enabled_var.get():
            self.cc_folder_entry.config(state='normal')
            self.log("‚úÖ Tri automatique des CC activ√©", "success")
        else:
            self.cc_folder_entry.config(state='disabled')
            self.log("‚ùå Tri automatique des CC d√©sactiv√©", "warning")
    
    def toggle_date_filter(self):
        """Activer/d√©sactiver le filtre de date"""
        if self.filter_date_var.get():
            self.days_spinbox.config(state='normal')
        else:
            self.days_spinbox.config(state='disabled')
    
    def on_action_changed(self, event=None):
        """G√©rer le changement d'action dans les r√®gles"""
        action = self.rule_action_var.get()
        if action in ["D√©placer vers", "Copier vers"]:
            self.folder_entry.config(state='normal')
            self.folder_dropdown.config(state='readonly')
            self.mark_checkbox.config(state='normal')
        else:
            self.folder_entry.config(state='disabled')
            self.folder_dropdown.config(state='disabled')
            if action == "Marquer comme lu":
                self.mark_checkbox.config(state='disabled')
                self.rule_mark_after_move_var.set(False)
    
    def on_folder_selected(self, event=None):
        """Quand un dossier est s√©lectionn√© dans le dropdown"""
        selected = self.folder_dropdown.get()
        if selected:
            self.rule_folder_var.set(selected)
    
    def load_existing_folders(self):
        """Charger la liste des dossiers existants depuis le serveur"""
        try:
            if not self.server_var.get() or not self.email_var.get() or not self.password_var.get():
                messagebox.showwarning("Attention", "Configurez d'abord la connexion!")
                return
            
            self.log("üìÅ Chargement des dossiers...", "info")
            
            connection = imaplib.IMAP4_SSL(self.server_var.get(), int(self.port_var.get()))
            connection.login(self.email_var.get(), self.password_var.get())
            
            result, folders = connection.list()
            
            if result == 'OK':
                self.existing_folders = []
                for folder in folders:
                    if folder:
                        folder_str = folder.decode('utf-8') if isinstance(folder, bytes) else str(folder)
                        
                        # Parser le format IMAP pour extraire le nom du dossier
                        # Format typique: '(\\HasNoChildren) "." "INBOX.Dossier"'
                        # ou: '(\\HasChildren) "/" "Folder Name"'
                        
                        # M√©thode am√©lior√©e pour extraire le nom
                        folder_name = None
                        
                        # Essayer d'abord avec des guillemets
                        if '"' in folder_str:
                            parts = folder_str.split('"')
                            if len(parts) >= 2:
                                # Le nom est g√©n√©ralement le dernier √©l√©ment entre guillemets
                                folder_name = parts[-2]
                        
                        # Si pas de guillemets ou √©chec, essayer avec des espaces
                        if not folder_name or folder_name in ['.', '/', '|']:
                            parts = folder_str.split()
                            if len(parts) >= 3:
                                # Le nom est g√©n√©ralement le dernier √©l√©ment
                                folder_name = parts[-1].strip('"')
                        
                        # Si toujours pas de nom valide, m√©thode simple sans regex
                        if not folder_name or folder_name in ['.', '/', '|']:
                            # Prendre le dernier √©l√©ment apr√®s un espace
                            parts = folder_str.rsplit(' ', 1)
                            if len(parts) > 1:
                                folder_name = parts[-1].strip('"\'')
                            else:
                                # Si pas d'espace, prendre toute la cha√Æne nettoy√©e
                                folder_name = folder_str.strip('"\' ')
                        
                        # Nettoyer le nom
                        if folder_name:
                            folder_name = folder_name.strip().strip('"')
                            if folder_name and folder_name not in ['.', '/', '|', '']:
                                self.existing_folders.append(folder_name)
                                self.log(f"  ‚Ä¢ Dossier trouv√©: {folder_name}", "info")
                
                # Retirer les doublons tout en pr√©servant l'ordre
                seen = set()
                unique_folders = []
                for folder in self.existing_folders:
                    if folder not in seen:
                        seen.add(folder)
                        unique_folders.append(folder)
                self.existing_folders = unique_folders
                
                # Mettre √† jour les widgets
                self.folder_dropdown['values'] = self.existing_folders
                self.folders_listbox.delete(0, tk.END)
                for folder in self.existing_folders:
                    self.folders_listbox.insert(tk.END, folder)
                
                # Actualiser la liste des r√®gles disponibles pour les cha√Ænes
                self.refresh_available_rules()
                
                self.log(f"‚úÖ {len(self.existing_folders)} dossiers charg√©s", "success")
                messagebox.showinfo("Succ√®s", f"{len(self.existing_folders)} dossiers charg√©s avec succ√®s!")
            
            connection.logout()
            
        except Exception as e:
            self.log(f"‚ùå Erreur: {str(e)}", "error")
            messagebox.showerror("Erreur", f"Impossible de charger les dossiers:\n{str(e)}")
    
    def refresh_folders_list(self):
        """Actualiser la liste des dossiers"""
        self.load_existing_folders()
    
    def select_all_folders(self):
        """S√©lectionner tous les dossiers"""
        self.folders_listbox.select_set(0, tk.END)
        self.update_selected_folders_label()
    
    def deselect_all_folders(self):
        """D√©s√©lectionner tous les dossiers"""
        self.folders_listbox.select_clear(0, tk.END)
        self.update_selected_folders_label()
    
    def update_selected_folders_label(self):
        """Mettre √† jour le label des dossiers s√©lectionn√©s"""
        selected_indices = self.folders_listbox.curselection()
        if selected_indices:
            selected = [self.folders_listbox.get(i) for i in selected_indices]
            self.selected_folders_label.config(text=", ".join(selected))
        else:
            self.selected_folders_label.config(text="Aucun dossier s√©lectionn√©")
    
    def add_custom_rule(self):
        """Ajouter une r√®gle personnalis√©e am√©lior√©e"""
        name = self.rule_name_var.get().strip()
        keyword = self.rule_keyword_var.get().strip()
        action = self.rule_action_var.get()
        
        if not name:
            messagebox.showwarning("Attention", "Veuillez donner un nom √† la r√®gle!")
            return
        
        if not keyword:
            messagebox.showwarning("Attention", "Veuillez entrer un mot-cl√© ou une expression!")
            return
        
        if action in ["D√©placer vers", "Copier vers"] and not self.rule_folder_var.get().strip():
            messagebox.showwarning("Attention", "Veuillez sp√©cifier le dossier de destination!")
            return
        
        try:
            priority = int(self.rule_priority_var.get())
        except:
            priority = 50
        
        rule = {
            "name": name,
            "field": self.rule_field_var.get(),
            "condition": self.rule_condition_var.get(),
            "keyword": keyword,
            "and_field": self.rule_and_field_var.get(),
            "and_condition": self.rule_and_condition_var.get(),
            "and_keyword": self.rule_and_keyword_var.get(),
            "action": action,
            "folder": self.rule_folder_var.get().strip() if action in ["D√©placer vers", "Copier vers"] else "",
            "case_sensitive": self.rule_case_sensitive_var.get(),
            "priority": priority,
            "stop_processing": self.rule_stop_processing_var.get(),
            "continue_chain": self.rule_continue_chain_var.get(),
            "mark_after_action": self.rule_mark_after_move_var.get()
        }
        
        self.rules.append(rule)
        self.sort_rules_by_priority()
        self.refresh_rules_tree()
        self.refresh_available_rules()
        
        # R√©initialiser les champs
        self.rule_name_var.set("")
        self.rule_keyword_var.set("")
        self.rule_and_keyword_var.set("")
        self.rule_folder_var.set("")
        self.rule_case_sensitive_var.set(False)
        self.rule_priority_var.set("50")
        self.rule_stop_processing_var.set(False)
        self.rule_continue_chain_var.set(False)
        self.rule_mark_after_move_var.set(False)
        
        self.log(f"‚úÖ R√®gle ajout√©e: {name}", "success")
        self.save_settings()
    
    def sort_rules_by_priority(self):
        """Trier les r√®gles par priorit√© (nombre croissant = priorit√© d√©croissante)"""
        self.rules.sort(key=lambda x: x.get('priority', 50))
    
    def refresh_rules_tree(self):
        """Actualiser l'affichage des r√®gles dans le TreeView"""
        # Effacer l'arbre
        for item in self.rules_tree.get_children():
            self.rules_tree.delete(item)
        
        # Ajouter les r√®gles
        for i, rule in enumerate(self.rules, 1):
            options = []
            if rule.get('case_sensitive'):
                options.append("Casse")
            if rule.get('stop_processing'):
                options.append("Stop")
            if rule.get('continue_chain'):
                options.append("Cha√Æne")
            if rule.get('mark_after_action'):
                options.append("Marquer")
            
            # Condition compl√®te
            condition = f"{rule['field']} {rule['condition']} '{rule['keyword'][:20]}'"
            if rule.get('and_field') and rule.get('and_keyword'):
                condition += f" ET {rule['and_field']} {rule['and_condition']} '{rule['and_keyword'][:15]}'"
            
            values = (
                rule.get('name', 'Sans nom'),
                rule.get('priority', 50),
                rule['field'],
                rule['condition'],
                rule['keyword'][:30] + ('...' if len(rule['keyword']) > 30 else ''),
                f"{rule['action']} {rule.get('folder', '')}".strip(),
                ', '.join(options)
            )
            
            self.rules_tree.insert('', 'end', text=str(i), values=values)
    
    def refresh_available_rules(self):
        """Actualiser la liste des r√®gles disponibles pour les cha√Ænes"""
        if hasattr(self, 'available_rules_listbox'):
            self.available_rules_listbox.delete(0, tk.END)
            for rule in self.rules:
                self.available_rules_listbox.insert(tk.END, f"{rule.get('name', 'Sans nom')} (P:{rule.get('priority', 50)})")
    
    def edit_rule(self):
        """Modifier une r√®gle existante"""
        selection = self.rules_tree.selection()
        if selection:
            item = selection[0]
            index = self.rules_tree.index(item)
            rule = self.rules[index]
            
            # Remplir les champs avec les valeurs de la r√®gle
            self.rule_name_var.set(rule.get('name', ''))
            self.rule_field_var.set(rule['field'])
            self.rule_condition_var.set(rule['condition'])
            self.rule_keyword_var.set(rule['keyword'])
            self.rule_and_field_var.set(rule.get('and_field', ''))
            self.rule_and_condition_var.set(rule.get('and_condition', 'contient'))
            self.rule_and_keyword_var.set(rule.get('and_keyword', ''))
            self.rule_action_var.set(rule.get('action', 'D√©placer vers'))
            self.rule_folder_var.set(rule.get('folder', ''))
            self.rule_case_sensitive_var.set(rule.get('case_sensitive', False))
            self.rule_priority_var.set(str(rule.get('priority', 50)))
            self.rule_stop_processing_var.set(rule.get('stop_processing', False))
            self.rule_continue_chain_var.set(rule.get('continue_chain', False))
            self.rule_mark_after_move_var.set(rule.get('mark_after_action', False))
            
            # Supprimer la r√®gle de la liste
            del self.rules[index]
            self.refresh_rules_tree()
            self.refresh_available_rules()
            
            self.log("‚úèÔ∏è R√®gle en cours de modification", "info")
        else:
            messagebox.showinfo("Info", "S√©lectionnez une r√®gle √† modifier")
    
    def duplicate_rule(self):
        """Dupliquer une r√®gle"""
        selection = self.rules_tree.selection()
        if selection:
            item = selection[0]
            index = self.rules_tree.index(item)
            rule = copy.deepcopy(self.rules[index])
            rule['name'] = rule.get('name', 'Sans nom') + " (copie)"
            self.rules.append(rule)
            self.sort_rules_by_priority()
            self.refresh_rules_tree()
            self.refresh_available_rules()
            self.save_settings()
            self.log("üìã R√®gle dupliqu√©e", "success")
        else:
            messagebox.showinfo("Info", "S√©lectionnez une r√®gle √† dupliquer")
    
    def delete_rule(self):
        """Supprimer la r√®gle s√©lectionn√©e"""
        selection = self.rules_tree.selection()
        if selection:
            item = selection[0]
            index = self.rules_tree.index(item)
            
            if messagebox.askyesno("Confirmation", "Supprimer cette r√®gle ?"):
                del self.rules[index]
                self.refresh_rules_tree()
                self.refresh_available_rules()
                self.save_settings()
                self.log("üóëÔ∏è R√®gle supprim√©e", "warning")
        else:
            messagebox.showinfo("Info", "S√©lectionnez une r√®gle √† supprimer")
    
    def import_rules(self):
        """Importer des r√®gles depuis un fichier"""
        filename = filedialog.askopenfilename(
            title="Importer des r√®gles",
            filetypes=[("JSON files", "*.json"), ("All files", "*.*")]
        )
        
        if filename:
            try:
                with open(filename, 'r', encoding='utf-8') as f:
                    imported_rules = json.load(f)
                
                if isinstance(imported_rules, list):
                    self.rules.extend(imported_rules)
                    self.sort_rules_by_priority()
                    self.refresh_rules_tree()
                    self.refresh_available_rules()
                    self.save_settings()
                    self.log(f"‚úÖ {len(imported_rules)} r√®gles import√©es", "success")
                    messagebox.showinfo("Succ√®s", f"{len(imported_rules)} r√®gles import√©es avec succ√®s!")
                else:
                    messagebox.showerror("Erreur", "Format de fichier invalide")
            except Exception as e:
                messagebox.showerror("Erreur", f"Impossible d'importer les r√®gles:\n{str(e)}")
    
    def export_rules(self):
        """Exporter les r√®gles vers un fichier"""
        if not self.rules:
            messagebox.showinfo("Info", "Aucune r√®gle √† exporter")
            return
        
        filename = filedialog.asksaveasfilename(
            title="Exporter les r√®gles",
            defaultextension=".json",
            filetypes=[("JSON files", "*.json"), ("All files", "*.*")]
        )
        
        if filename:
            try:
                with open(filename, 'w', encoding='utf-8') as f:
                    json.dump(self.rules, f, indent=4, ensure_ascii=False)
                
                self.log(f"‚úÖ {len(self.rules)} r√®gles export√©es", "success")
                messagebox.showinfo("Succ√®s", f"{len(self.rules)} r√®gles export√©es avec succ√®s!")
            except Exception as e:
                messagebox.showerror("Erreur", f"Impossible d'exporter les r√®gles:\n{str(e)}")
    
    # M√©thodes pour les cha√Ænes de r√®gles
    def add_rule_to_chain(self):
        """Ajouter une r√®gle √† la cha√Æne en cours"""
        selection = self.available_rules_listbox.curselection()
        if selection:
            rule_text = self.available_rules_listbox.get(selection[0])
            self.chain_rules_listbox.insert(tk.END, rule_text)
    
    def remove_rule_from_chain(self):
        """Retirer une r√®gle de la cha√Æne"""
        selection = self.chain_rules_listbox.curselection()
        if selection:
            self.chain_rules_listbox.delete(selection[0])
    
    def move_chain_rule_up(self):
        """Monter une r√®gle dans la cha√Æne"""
        selection = self.chain_rules_listbox.curselection()
        if selection and selection[0] > 0:
            index = selection[0]
            item = self.chain_rules_listbox.get(index)
            self.chain_rules_listbox.delete(index)
            self.chain_rules_listbox.insert(index - 1, item)
            self.chain_rules_listbox.select_set(index - 1)
    
    def move_chain_rule_down(self):
        """Descendre une r√®gle dans la cha√Æne"""
        selection = self.chain_rules_listbox.curselection()
        if selection and selection[0] < self.chain_rules_listbox.size() - 1:
            index = selection[0]
            item = self.chain_rules_listbox.get(index)
            self.chain_rules_listbox.delete(index)
            self.chain_rules_listbox.insert(index + 1, item)
            self.chain_rules_listbox.select_set(index + 1)
    
    def create_rule_chain(self):
        """Cr√©er une cha√Æne de r√®gles"""
        name = self.chain_name_var.get().strip()
        if not name:
            messagebox.showwarning("Attention", "Donnez un nom √† la cha√Æne!")
            return
        
        # R√©cup√©rer les r√®gles de la cha√Æne
        chain_rules = []
        for i in range(self.chain_rules_listbox.size()):
            rule_text = self.chain_rules_listbox.get(i)
            # Extraire le nom de la r√®gle
            rule_name = rule_text.split(" (P:")[0]
            # Trouver la r√®gle correspondante
            for rule in self.rules:
                if rule.get('name') == rule_name:
                    chain_rules.append(rule)
                    break
        
        if not chain_rules:
            messagebox.showwarning("Attention", "Ajoutez au moins une r√®gle √† la cha√Æne!")
            return
        
        try:
            priority = int(self.chain_priority_var.get())
        except:
            priority = 50
        
        chain = {
            "name": name,
            "priority": priority,
            "rules": chain_rules,
            "stop_on_match": self.chain_stop_on_match_var.get(),
            "enabled": self.chain_enabled_var.get()
        }
        
        self.rule_chains.append(chain)
        self.refresh_chains_tree()
        self.save_chains()
        
        # R√©initialiser
        self.chain_name_var.set("")
        self.chain_priority_var.set("50")
        self.chain_rules_listbox.delete(0, tk.END)
        
        self.log(f"‚õìÔ∏è Cha√Æne cr√©√©e: {name} avec {len(chain_rules)} r√®gles", "success")
    
    def refresh_chains_tree(self):
        """Actualiser l'affichage des cha√Ænes"""
        # Effacer l'arbre
        for item in self.chains_tree.get_children():
            self.chains_tree.delete(item)
        
        # Ajouter les cha√Ænes
        for chain in self.rule_chains:
            status = "‚úÖ Active" if chain.get('enabled', True) else "‚ùå Inactive"
            rules_count = len(chain.get('rules', []))
            text = f"{chain['name']} - {status} - {rules_count} r√®gles - Priorit√©: {chain.get('priority', 50)}"
            
            parent = self.chains_tree.insert('', 'end', text=text, open=False)
            
            # Ajouter les r√®gles de la cha√Æne comme enfants
            for rule in chain.get('rules', []):
                rule_text = f"‚Üí {rule.get('name', 'Sans nom')}: {rule['field']} {rule['condition']} '{rule['keyword'][:30]}'"
                self.chains_tree.insert(parent, 'end', text=rule_text)
    
    def edit_chain(self):
        """Modifier une cha√Æne"""
        selection = self.chains_tree.selection()
        if selection:
            # √Ä impl√©menter si n√©cessaire
            messagebox.showinfo("Info", "Fonction en cours de d√©veloppement")
    
    def delete_chain(self):
        """Supprimer une cha√Æne"""
        selection = self.chains_tree.selection()
        if selection:
            item = selection[0]
            # Trouver l'index de la cha√Æne
            text = self.chains_tree.item(item)['text']
            chain_name = text.split(" - ")[0]
            
            if messagebox.askyesno("Confirmation", f"Supprimer la cha√Æne '{chain_name}' ?"):
                self.rule_chains = [c for c in self.rule_chains if c['name'] != chain_name]
                self.refresh_chains_tree()
                self.save_chains()
                self.log(f"üóëÔ∏è Cha√Æne supprim√©e: {chain_name}", "warning")
    
    def toggle_chain(self):
        """Activer/d√©sactiver une cha√Æne"""
        selection = self.chains_tree.selection()
        if selection:
            item = selection[0]
            text = self.chains_tree.item(item)['text']
            chain_name = text.split(" - ")[0]
            
            for chain in self.rule_chains:
                if chain['name'] == chain_name:
                    chain['enabled'] = not chain.get('enabled', True)
                    break
            
            self.refresh_chains_tree()
            self.save_chains()
            self.log(f"üîÑ Cha√Æne bascul√©e: {chain_name}", "info")
    
    def save_chains(self):
        """Sauvegarder les cha√Ænes de r√®gles"""
        try:
            with open(self.chains_file, 'w', encoding='utf-8') as f:
                json.dump(self.rule_chains, f, indent=4, ensure_ascii=False)
        except Exception as e:
            self.log(f"‚ö†Ô∏è Impossible de sauvegarder les cha√Ænes: {str(e)}", "warning")
    
    def load_chains(self):
        """Charger les cha√Ænes de r√®gles"""
        try:
            if self.chains_file.exists():
                with open(self.chains_file, 'r', encoding='utf-8') as f:
                    self.rule_chains = json.load(f)
                self.refresh_chains_tree()
        except Exception as e:
            self.log(f"‚ö†Ô∏è Impossible de charger les cha√Ænes: {str(e)}", "warning")
    
    def test_connection(self):
        """Tester la connexion au serveur avec mode PEEK"""
        self.log("\n" + "="*50, "separator")
        self.log("üîå TEST DE CONNEXION", "header")
        self.log("="*50, "separator")
        
        try:
            server = self.server_var.get()
            if not server:
                messagebox.showerror("Erreur", "Veuillez entrer un serveur IMAP!")
                return
                
            self.log(f"Connexion √† {server}:{self.port_var.get()}...", "info")
            
            connection = imaplib.IMAP4_SSL(server, int(self.port_var.get()))
            connection.login(self.email_var.get(), self.password_var.get())
            
            # Obtenir info
            result, folders = connection.list()
            
            self.log("‚úÖ Connexion r√©ussie!", "success")
            self.log(f"üìÅ {len(folders)} dossiers trouv√©s", "info")
            
            # Test du mode PEEK
            connection.select('INBOX', readonly=True)
            result, data = connection.search(None, 'ALL')
            if result == 'OK':
                email_count = len(data[0].split())
                self.log(f"üìß {email_count} emails dans la bo√Æte de r√©ception", "info")
                
                # Tester PEEK sur le premier email
                if email_count > 0:
                    first_id = data[0].split()[0]
                    result, msg_data = connection.fetch(first_id, '(BODY.PEEK[HEADER])')
                    if result == 'OK':
                        self.log("‚úÖ Mode PEEK support√© - Les emails ne seront PAS marqu√©s comme lus", "success")
                    else:
                        self.log("‚ö†Ô∏è Mode PEEK peut ne pas √™tre support√© compl√®tement", "warning")
            
            connection.logout()
            
            messagebox.showinfo("Succ√®s", 
                              f"‚úÖ Connexion r√©ussie!\n\n"
                              f"Serveur: {server}\n"
                              f"Email: {self.email_var.get()}\n"
                              f"{len(folders)} dossiers disponibles\n"
                              f"Mode PEEK support√© ‚úì")
            
        except Exception as e:
            self.log(f"‚ùå Erreur: {str(e)}", "error")
            error_msg = str(e)
            
            if "authentication failed" in error_msg.lower():
                error_msg += "\n\nüí° V√©rifiez:\n‚Ä¢ Le serveur IMAP est correct\n‚Ä¢ L'email et le mot de passe\n‚Ä¢ Pour Gmail: utilisez un mot de passe d'application"
            
            messagebox.showerror("Erreur de connexion", error_msg)
    
    def get_full_folder_name(self, folder_name):
        """Obtenir le nom complet du dossier - ne pas modifier si d√©j√† complet"""
        # Si le dossier existe d√©j√† dans la liste, le retourner tel quel
        if folder_name in self.existing_folders:
            return folder_name
        
        # Si c'est d√©j√† un chemin complet (contient INBOX ou commence par un s√©parateur)
        if "INBOX" in folder_name or folder_name.startswith(("/", ".", "\\")):
            return folder_name
        
        # Sinon, essayer avec INBOX. (pour les nouveaux dossiers)
        # Mais seulement si on n'a pas de dossiers existants pour v√©rifier
        if not self.existing_folders:
            return f"INBOX.{folder_name}"
        
        # Si on a des dossiers existants, analyser leur format
        for existing in self.existing_folders:
            if "INBOX." in existing:
                return f"INBOX.{folder_name}"
            elif "INBOX/" in existing:
                return f"INBOX/{folder_name}"
        
        # Par d√©faut, retourner tel quel
        return folder_name
    
    def create_folder_if_needed(self, connection, folder_name):
        """Cr√©er un dossier IMAP s'il n'existe pas"""
        if not folder_name:
            return True
            
        try:
            # Utiliser le nom tel quel si c'est un dossier existant
            if folder_name in self.existing_folders:
                self.log(f"üìÅ Dossier '{folder_name}' d√©j√† existant", "info")
                return True
            
            # Pour un nouveau dossier, essayer de le cr√©er
            full_folder_name = self.get_full_folder_name(folder_name)
            
            # Lister tous les dossiers existants
            result, folders = connection.list()
            
            # V√©rifier si le dossier existe sous diff√©rentes formes
            folder_exists = False
            if result == 'OK':
                for folder in folders:
                    if folder:
                        folder_str = folder.decode('utf-8') if isinstance(folder, bytes) else str(folder)
                        # V√©rifier si le nom appara√Æt dans la cha√Æne
                        if folder_name.lower() in folder_str.lower() or full_folder_name.lower() in folder_str.lower():
                            folder_exists = True
                            self.log(f"üìÅ Dossier '{folder_name}' trouv√©", "info")
                            break
            
            if not folder_exists:
                # Essayer de cr√©er le dossier
                self.log(f"üìÅ Cr√©ation du dossier '{full_folder_name}'...", "info")
                result = connection.create(full_folder_name)
                if result[0] == 'OK':
                    self.log(f"‚úÖ Dossier '{full_folder_name}' cr√©√© avec succ√®s", "success")
                    connection.subscribe(full_folder_name)
                    # Ajouter √† la liste des dossiers existants
                    if full_folder_name not in self.existing_folders:
                        self.existing_folders.append(full_folder_name)
                    return True
                else:
                    # Si √©chec avec INBOX., essayer sans
                    if "INBOX." in full_folder_name:
                        simple_name = folder_name
                        result = connection.create(simple_name)
                        if result[0] == 'OK':
                            self.log(f"‚úÖ Dossier '{simple_name}' cr√©√© avec succ√®s", "success")
                            connection.subscribe(simple_name)
                            if simple_name not in self.existing_folders:
                                self.existing_folders.append(simple_name)
                            return True
                    
                    self.log(f"‚ùå Impossible de cr√©er '{full_folder_name}': {result}", "error")
                    return False
            return True
                    
        except Exception as e:
            self.log(f"‚ö†Ô∏è Erreur avec le dossier '{folder_name}': {str(e)[:100]}", "warning")
            return False
    
    def start_analysis(self):
        """D√©marrer l'analyse des emails"""
        if not self.email_var.get() or not self.password_var.get():
            messagebox.showerror("Erreur", "Configurez d'abord vos identifiants dans l'onglet Connexion!")
            return
        
        if not self.server_var.get():
            messagebox.showerror("Erreur", "Le serveur IMAP n'est pas configur√©!")
            return
        
        if self.is_running:
            messagebox.showinfo("Info", "Une analyse est d√©j√† en cours!")
            return
        
        # Avertissement mode test
        if self.dry_run_var.get():
            if not messagebox.askyesno("Mode test", 
                                       "Le mode test est activ√©.\n\n"
                                       "Les emails seront analys√©s mais PAS d√©plac√©s.\n"
                                       "Continuer ?"):
                return
        
        self.is_running = True
        self.analyze_btn.config(state='disabled', text="‚è≥ ANALYSE EN COURS...")
        self.status_var.set("üîÑ Analyse en cours...")
        
        # R√©initialiser les emails trait√©s
        self.processed_emails.clear()
        
        # Sauvegarder avant l'analyse
        self.save_settings()
        
        # Thread pour ne pas bloquer l'interface
        thread = threading.Thread(target=self.analysis_worker, daemon=True)
        thread.start()
    
    def analysis_worker(self):
        """Worker pour l'analyse des emails avec support des cha√Ænes et dossiers multiples"""
        stats = {
            'total': 0,
            'processed': 0,
            'cc_moved': 0,
            'rules_applied': 0,
            'chains_applied': 0,
            'errors': 0
        }
        
        try:
            # Connexion
            self.log("\n" + "="*60, "separator")
            self.log("üöÄ D√âMARRAGE DE L'ANALYSE V3", "header")
            self.log("="*60, "separator")
            
            if self.dry_run_var.get():
                self.log("üß™ MODE TEST ACTIV√â - Aucun email ne sera d√©plac√©", "warning")
            
            if self.preserve_unread_var.get():
                self.log("üîí Pr√©servation du statut non-lu activ√©e", "success")
            
            self.log(f"üîå Connexion √† {self.server_var.get()}...", "info")
            
            connection = imaplib.IMAP4_SSL(self.server_var.get(), int(self.port_var.get()))
            connection.login(self.email_var.get(), self.password_var.get())
            
            self.log(f"‚úÖ Connect√© avec succ√®s!", "success")
            
            # Cr√©er les dossiers n√©cessaires
            folders_to_create = set()
            
            if self.cc_enabled_var.get() and self.cc_folder_var.get():
                folders_to_create.add(self.cc_folder_var.get())
            
            for rule in self.rules:
                if rule.get('action') in ['D√©placer vers', 'Copier vers'] and rule.get('folder'):
                    folders_to_create.add(rule['folder'])
            
            for folder in folders_to_create:
                self.create_folder_if_needed(connection, folder)
            
            # D√©terminer les dossiers √† analyser
            folders_to_process = []
            
            # Toujours inclure INBOX si configur√©
            if self.include_inbox_var.get():
                folders_to_process.append('INBOX')
            
            # Ajouter les dossiers s√©lectionn√©s
            selected_indices = self.folders_listbox.curselection()
            for index in selected_indices:
                folder = self.folders_listbox.get(index)
                if folder not in folders_to_process:
                    folders_to_process.append(folder)
            
            if not folders_to_process:
                folders_to_process = ['INBOX']  # Par d√©faut
            
            self.log(f"üìÅ Dossiers √† analyser: {', '.join(folders_to_process)}", "info")
            
            # Traiter chaque dossier
            for folder in folders_to_process:
                self.log(f"\nüìÇ Analyse du dossier: {folder}", "header")
                self.process_folder(connection, folder, stats)
            
            # D√©connexion
            connection.close()
            connection.logout()
            
            # R√©sum√© final
            self.display_summary(stats)
            
        except Exception as e:
            self.log(f"‚ùå Erreur critique: {str(e)}", "error")
            self.status_var.set("‚ùå Erreur - V√©rifiez la connexion")
            
            error_msg = str(e)
            if "authentication" in error_msg.lower():
                error_msg += "\n\nüí° V√©rifiez:\n‚Ä¢ Le serveur IMAP\n‚Ä¢ L'email et le mot de passe"
            
            messagebox.showerror("Erreur", f"Erreur lors de l'analyse:\n\n{error_msg}")
        
        finally:
            self.is_running = False
            self.root.after(0, lambda: self.analyze_btn.config(
                state='normal',
                text="üöÄ ANALYSER ET TRIER LES EMAILS"
            ))
            
            # Mettre √† jour les statistiques
            self.update_stats(stats)
    
    def process_folder(self, connection, folder, stats):
        """Traiter un dossier sp√©cifique"""
        try:
            # S√©lectionner le dossier - toujours en mode normal pour pouvoir effectuer les actions
            # Le mode PEEK sera utilis√© uniquement pour la r√©cup√©ration des emails
            connection.select(folder)
            self.log(f"üìñ {folder} ouvert pour traitement", "info")
            
            # Construire la requ√™te de recherche
            search_criteria = self.build_search_criteria()
            result, data = connection.search(None, search_criteria)
            
            if result != 'OK':
                self.log(f"‚ùå Erreur lors de la recherche dans {folder}", "error")
                return
            
            email_ids = data[0].split()
            folder_total = len(email_ids)
            
            if folder_total == 0:
                self.log(f"üì≠ Aucun email dans {folder}", "warning")
                return
            
            # Limiter si n√©cessaire
            try:
                max_emails = int(self.max_emails_var.get())
                if max_emails > 0 and folder_total > max_emails:
                    email_ids = email_ids[-max_emails:]
                    folder_total = max_emails
            except:
                pass
            
            self.log(f"üì¨ {folder_total} emails √† analyser dans {folder}", "info")
            
            stats['total'] += folder_total
            
            # Traiter par lots
            batch_size = int(self.batch_size_var.get())
            
            for i in range(0, len(email_ids), batch_size):
                batch = email_ids[i:i+batch_size]
                
                for num in batch:
                    if not self.is_running:
                        self.log("‚èπÔ∏è Analyse interrompue", "warning")
                        return
                    
                    stats['processed'] += 1
                    
                    # Mise √† jour du statut
                    if stats['processed'] % 10 == 0:
                        self.status_var.set(f"üîÑ {folder}: {stats['processed']}/{stats['total']} emails")
                    
                    try:
                        # R√©cup√©rer l'email avec PEEK pour ne pas le marquer comme lu
                        if self.preserve_unread_var.get():
                            fetch_command = '(BODY.PEEK[] FLAGS)'
                        else:
                            fetch_command = '(RFC822 FLAGS)'
                        
                        result, msg_data = connection.fetch(num, fetch_command)
                        
                        if result != 'OK':
                            stats['errors'] += 1
                            continue
                        
                        # Parser l'email
                        raw_email = msg_data[0][1]
                        msg = email.message_from_bytes(raw_email)
                        
                        # R√©cup√©rer les flags
                        current_flags = self.extract_flags(msg_data)
                        is_unread = b'\\Seen' not in current_flags
                        
                        # D√©coder les headers
                        subject = self.decode_header(msg.get("Subject", ""))[:100]
                        from_addr = self.decode_header(msg.get("From", ""))
                        to_addr = self.decode_header(msg.get("To", ""))
                        cc_addr = self.decode_header(msg.get("Cc", ""))
                        date = msg.get("Date", "")
                        
                        # Analyser avec le nouveau syst√®me
                        action = self.analyze_email_v3(msg, subject, from_addr, to_addr, 
                                                       cc_addr, date, current_flags, stats)
                        
                        if action:
                            if not self.dry_run_var.get():
                                # Ex√©cuter l'action imm√©diatement
                                success = self.execute_action(connection, num, action, subject, is_unread)
                                if not success:
                                    stats['errors'] += 1
                            else:
                                self.log(f"üß™ [TEST] {subject[:50]}... ‚Üí {action.get('folder', action.get('action'))}", "test")
                        
                    except Exception as e:
                        stats['errors'] += 1
                        self.log(f"‚ö†Ô∏è Erreur sur un email: {str(e)[:100]}", "error")
            
            # Expurger les messages marqu√©s pour suppression
            if not self.dry_run_var.get():
                try:
                    result = connection.expunge()
                    if result[0] == 'OK':
                        self.log(f"üóëÔ∏è Messages supprim√©s expurg√©s dans {folder}", "info")
                except Exception as e:
                    self.log(f"‚ö†Ô∏è Erreur lors de l'expunge: {str(e)}", "warning")
                
        except Exception as e:
            self.log(f"‚ö†Ô∏è Erreur dans le dossier {folder}: {str(e)}", "error")
            stats['errors'] += 1
    
    def analyze_email_v3(self, msg, subject, from_addr, to_addr, cc_addr, date, flags, stats):
        """Analyser un email avec le syst√®me de cha√Ænes et priorit√©s"""
        user_email = self.email_var.get().lower()
        
        # V√©rifier d'abord les cha√Ænes de r√®gles actives
        for chain in sorted(self.rule_chains, key=lambda x: x.get('priority', 50)):
            if not chain.get('enabled', True):
                continue
            
            for rule in chain.get('rules', []):
                if self.check_rule_v3(msg, subject, from_addr, to_addr, cc_addr, rule):
                    self.log(f"‚õìÔ∏è Cha√Æne '{chain['name']}' ‚Üí R√®gle '{rule.get('name')}'", "info")
                    stats['chains_applied'] += 1
                    
                    action = self.create_action_from_rule(rule)
                    
                    if chain.get('stop_on_match', True):
                        return action
                    
                    if not rule.get('continue_chain', False):
                        return action
        
        # Ensuite les r√®gles individuelles par priorit√©
        for rule in self.rules:
            if self.check_rule_v3(msg, subject, from_addr, to_addr, cc_addr, rule):
                self.log(f"üìç R√®gle: {rule.get('name', 'Sans nom')}", "info")
                stats['rules_applied'] += 1
                
                action = self.create_action_from_rule(rule)
                
                if rule.get('stop_processing'):
                    return action
                
                if not rule.get('continue_chain'):
                    return action
        
        # Enfin la gestion CC
        is_in_cc = cc_addr and user_email in cc_addr.lower()
        is_primary = to_addr and user_email in to_addr.lower()
        
        if self.cc_enabled_var.get() and is_in_cc and not is_primary:
            if self.cc_skip_important_var.get() and b'\\Flagged' in flags:
                return None
            
            if self.cc_skip_recent_var.get():
                try:
                    from email.utils import parsedate_to_datetime
                    email_date = parsedate_to_datetime(date)
                    if (datetime.now(email_date.tzinfo) - email_date).days < 1:
                        return None
                except:
                    pass
            
            stats['cc_moved'] += 1
            return {
                'type': 'move',
                'folder': self.cc_folder_var.get(),
                'mark_read': self.cc_mark_read_after_var.get()
            }
        
        return None
    
    def check_rule_v3(self, msg, subject, from_addr, to_addr, cc_addr, rule):
        """V√©rifier si un email correspond √† une r√®gle avec conditions multiples"""
        # Premi√®re condition
        if not self.check_single_condition(msg, subject, from_addr, to_addr, cc_addr, 
                                          rule.get('field'), rule.get('condition'), 
                                          rule.get('keyword'), rule.get('case_sensitive')):
            return False
        
        # Condition ET (optionnelle)
        if rule.get('and_field') and rule.get('and_keyword'):
            if not self.check_single_condition(msg, subject, from_addr, to_addr, cc_addr,
                                              rule.get('and_field'), rule.get('and_condition'),
                                              rule.get('and_keyword'), rule.get('case_sensitive')):
                return False
        
        return True
    
    def check_single_condition(self, msg, subject, from_addr, to_addr, cc_addr, 
                              field, condition, keyword, case_sensitive):
        """V√©rifier une condition unique"""
        # Obtenir le texte √† v√©rifier
        if field == "Sujet":
            text = subject
        elif field == "Exp√©diteur":
            text = from_addr
        elif field == "Destinataire":
            text = to_addr
        elif field == "Corps":
            text = self.get_email_body(msg)
        elif field == "Sujet ou Corps":
            text = subject + " " + self.get_email_body(msg)
        elif field == "Domaine exp√©diteur":
            # Extraire le domaine
            import re
            match = re.search(r'@([^\s>]+)', from_addr)
            text = match.group(1) if match else ""
        else:
            text = subject
        
        # Gestion de la casse
        if not case_sensitive:
            text = text.lower()
            keyword = keyword.lower()
        
        # V√©rifier la condition
        if condition == "contient":
            return keyword in text
        elif condition == "ne contient pas":
            return keyword not in text
        elif condition == "commence par":
            return text.startswith(keyword)
        elif condition == "finit par":
            return text.endswith(keyword)
        elif condition == "est exactement":
            return text == keyword
        elif condition == "n'est pas":
            return text != keyword
        elif condition == "correspond √† (regex)":
            try:
                return bool(re.search(keyword, text))
            except:
                return False
        elif condition == "contient un de (liste)":
            # S√©parer par virgules
            keywords = [k.strip() for k in keyword.split(',')]
            return any(k in text for k in keywords)
        
        return False
    
    def create_action_from_rule(self, rule):
        """Cr√©er une action depuis une r√®gle"""
        return {
            'type': rule.get('action', 'move'),
            'action': rule.get('action'),
            'folder': rule.get('folder', ''),
            'mark_read': rule.get('mark_after_action', False)
        }
    
    def build_search_criteria(self):
        """Construire les crit√®res de recherche IMAP"""
        criteria = []
        
        if self.filter_unread_only_var.get():
            criteria.append('UNSEEN')
        
        if self.filter_date_var.get():
            try:
                days = int(self.filter_days_var.get())
                since_date = (datetime.now() - timedelta(days=days)).strftime("%d-%b-%Y")
                criteria.append(f'SINCE {since_date}')
            except:
                pass
        
        return ' '.join(criteria) if criteria else 'ALL'
    
    def extract_flags(self, msg_data):
        """Extraire les flags d'un message"""
        for response in msg_data:
            if isinstance(response, tuple) and len(response) >= 2:
                if b'FLAGS' in response[0]:
                    return response[0]
        return b''
    
    def decode_header(self, header):
        """D√©coder un header d'email"""
        if not header:
            return ""
        
        try:
            decoded = decode_header(header)[0][0]
            if isinstance(decoded, bytes):
                return decoded.decode('utf-8', errors='ignore')
            return str(decoded)
        except:
            return str(header)
    
    def get_email_body(self, msg):
        """Extraire le corps du message"""
        body = ""
        
        try:
            if msg.is_multipart():
                for part in msg.walk():
                    content_type = part.get_content_type()
                    if "text/plain" in content_type:
                        try:
                            body = part.get_payload(decode=True).decode('utf-8', errors='ignore')
                            if body:
                                break
                        except:
                            continue
            else:
                try:
                    body = msg.get_payload(decode=True).decode('utf-8', errors='ignore')
                except:
                    body = str(msg.get_payload())
        except:
            body = ""
        
        return body[:1000]
    
    def execute_action(self, connection, num, action, subject, was_unread):
        """Ex√©cuter une action sur un email"""
        try:
            action_type = action.get('action', action.get('type', 'move'))
            
            if action_type in ['move', 'D√©placer vers']:
                # Utiliser le nom de dossier tel quel s'il existe, sinon essayer de le formater
                folder_name = action['folder']
                if folder_name not in self.existing_folders:
                    folder_name = self.get_full_folder_name(folder_name)
                
                self.log(f"üì¶ D√©placement vers: {folder_name}", "info")
                
                if self.backup_before_move_var.get():
                    # Cr√©er une copie de sauvegarde
                    backup_folder = "BACKUP"
                    if backup_folder not in self.existing_folders:
                        backup_folder = self.get_full_folder_name("BACKUP")
                    self.create_folder_if_needed(connection, "BACKUP")
                    connection.copy(num, backup_folder)
                
                # Copier vers le nouveau dossier
                result = connection.copy(num, folder_name)
                
                if result[0] == 'OK':
                    # Marquer pour suppression dans le dossier source
                    connection.store(num, '+FLAGS', '\\Deleted')
                    
                    # G√©rer le statut lu/non-lu apr√®s d√©placement si demand√©
                    if not self.preserve_unread_var.get() and action.get('mark_read'):
                        # Note: cela ne fonctionnera que sur l'email source, pas la copie
                        connection.store(num, '+FLAGS', '\\Seen')
                    
                    self.log(f"‚úÖ {subject[:50]}... ‚Üí {folder_name}", "success")
                    return True
                else:
                    self.log(f"‚ö†Ô∏è √âchec du d√©placement vers {folder_name}: {result}", "warning")
                    # Essayer avec un nom alternatif si √©chec
                    if "INBOX." not in folder_name and folder_name != "INBOX":
                        alt_folder = f"INBOX.{folder_name}"
                        self.log(f"üîÑ Tentative avec: {alt_folder}", "info")
                        result = connection.copy(num, alt_folder)
                        if result[0] == 'OK':
                            connection.store(num, '+FLAGS', '\\Deleted')
                            self.log(f"‚úÖ {subject[:50]}... ‚Üí {alt_folder}", "success")
                            return True
            
            elif action_type in ['copy', 'Copier vers']:
                folder_name = action['folder']
                if folder_name not in self.existing_folders:
                    folder_name = self.get_full_folder_name(folder_name)
                
                result = connection.copy(num, folder_name)
                
                if result[0] == 'OK':
                    if action.get('mark_read') and not self.preserve_unread_var.get():
                        connection.store(num, '+FLAGS', '\\Seen')
                    self.log(f"üìÑ {subject[:50]}... copi√© vers {folder_name}", "info")
                    return True
                else:
                    self.log(f"‚ö†Ô∏è √âchec de la copie vers {folder_name}", "warning")
            
            elif action_type == 'Marquer comme lu':
                if not self.preserve_unread_var.get():
                    connection.store(num, '+FLAGS', '\\Seen')
                    self.log(f"üìñ {subject[:50]}... marqu√© comme lu", "info")
                    return True
            
            elif action_type == 'Marquer comme important':
                connection.store(num, '+FLAGS', '\\Flagged')
                self.log(f"‚≠ê {subject[:50]}... marqu√© comme important", "info")
                return True
            
            elif action_type == 'Supprimer':
                connection.store(num, '+FLAGS', '\\Deleted')
                self.log(f"üóëÔ∏è {subject[:50]}... supprim√©", "warning")
                return True
            
            elif action_type == '√âtiqueter':
                if action.get('folder'):
                    connection.store(num, '+FLAGS', f'({action["folder"]})')
                    self.log(f"üè∑Ô∏è {subject[:50]}... √©tiquet√©: {action['folder']}", "info")
                    return True
            
        except Exception as e:
            self.log(f"‚ùå Erreur lors de l'action sur '{subject[:30]}': {str(e)}", "error")
            return False
    
    def display_summary(self, stats):
        """Afficher le r√©sum√© de l'analyse"""
        self.log("\n" + "="*60, "separator")
        self.log("üìä R√âSUM√â DE L'ANALYSE V3", "header")
        self.log("="*60, "separator")
        
        if self.dry_run_var.get():
            self.log("üß™ MODE TEST - Aucun email n'a √©t√© r√©ellement d√©plac√©", "warning")
        
        self.log(f"‚úÖ Emails analys√©s: {stats['processed']}/{stats['total']}", "success")
        self.log(f"üìã Emails en CC d√©plac√©s: {stats['cc_moved']}", "info")
        self.log(f"üéØ R√®gles appliqu√©es: {stats['rules_applied']}", "info")
        self.log(f"‚õìÔ∏è Cha√Ænes appliqu√©es: {stats['chains_applied']}", "info")
        
        if stats['errors'] > 0:
            self.log(f"‚ö†Ô∏è Erreurs rencontr√©es: {stats['errors']}", "warning")
        
        total_moved = stats['cc_moved'] + stats['rules_applied'] + stats['chains_applied']
        self.log(f"üìß TOTAL trait√©: {total_moved} actions", "success")
        
        if self.preserve_unread_var.get():
            self.log("üîí Statut non-lu pr√©serv√© pour tous les emails", "success")
        
        self.status_var.set(f"‚úÖ Termin√© - {total_moved} actions sur {stats['processed']} emails")
        
        # Message de fin
        if not self.dry_run_var.get():
            if total_moved > 0:
                messagebox.showinfo("Analyse termin√©e", 
                                   f"‚úÖ Analyse termin√©e avec succ√®s!\n\n"
                                   f"üìä R√©sultats:\n"
                                   f"‚Ä¢ {stats['processed']} emails analys√©s\n"
                                   f"‚Ä¢ {stats['cc_moved']} emails en CC d√©plac√©s\n"
                                   f"‚Ä¢ {stats['rules_applied']} r√®gles appliqu√©es\n"
                                   f"‚Ä¢ {stats['chains_applied']} cha√Ænes appliqu√©es\n"
                                   f"‚Ä¢ Total: {total_moved} actions effectu√©es\n\n"
                                   f"{'üîí Statut non-lu pr√©serv√©' if self.preserve_unread_var.get() else ''}")
            else:
                messagebox.showinfo("Analyse termin√©e", 
                                   f"Analyse termin√©e.\n\n"
                                   f"üìä {stats['processed']} emails analys√©s\n"
                                   f"Aucun email √† traiter selon les crit√®res.")
    
    def update_stats(self, stats):
        """Mettre √† jour les statistiques affich√©es"""
        stats_text = (f"Derni√®re analyse: {datetime.now().strftime('%d/%m/%Y %H:%M')}\n"
                     f"‚Ä¢ Emails trait√©s: {stats['processed']}\n"
                     f"‚Ä¢ CC d√©plac√©s: {stats['cc_moved']}\n"
                     f"‚Ä¢ R√®gles appliqu√©es: {stats['rules_applied']}\n"
                     f"‚Ä¢ Cha√Ænes appliqu√©es: {stats.get('chains_applied', 0)}")
        self.stats_label.config(text=stats_text)
    
    def log(self, message, tag="info"):
        """Ajouter un message au log avec coloration"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        
        if tag not in ["separator", "header"]:
            message = f"[{timestamp}] {message}"
        
        self.console.insert(tk.END, message + "\n")
        
        # Colorer selon le type
        colors = {
            "error": "#ff6b6b",
            "success": "#51cf66",
            "warning": "#ffd43b",
            "info": "#74c0fc",
            "cc": "#a9e34b",
            "rule": "#ff8cc3",
            "header": "#ffffff",
            "test": "#ffa94d"
        }
        
        if tag in colors:
            self.console.tag_add(tag, f"end-2l", "end-1l")
            self.console.tag_config(tag, foreground=colors[tag])
            if tag == "header":
                self.console.tag_config(tag, font=("Consolas", 11, "bold"))
        
        self.console.see(tk.END)
        self.root.update_idletasks()
    
    def save_settings(self):
        """Sauvegarder les param√®tres"""
        settings = {
            "email": self.email_var.get(),
            "server": self.server_var.get(),
            "port": self.port_var.get(),
            "preserve_unread": self.preserve_unread_var.get(),
            "cc_enabled": self.cc_enabled_var.get(),
            "cc_folder": self.cc_folder_var.get(),
            "cc_mark_read_after": self.cc_mark_read_after_var.get(),
            "cc_skip_important": self.cc_skip_important_var.get(),
            "cc_skip_recent": self.cc_skip_recent_var.get(),
            "max_emails": self.max_emails_var.get(),
            "processing_mode": self.processing_mode_var.get(),
            "filter_unread_only": self.filter_unread_only_var.get(),
            "filter_date": self.filter_date_var.get(),
            "filter_days": self.filter_days_var.get(),
            "dry_run": self.dry_run_var.get(),
            "backup_before_move": self.backup_before_move_var.get(),
            "confirm_actions": self.confirm_actions_var.get(),
            "batch_size": self.batch_size_var.get(),
            "parallel_processing": self.parallel_processing_var.get(),
            "include_inbox": self.include_inbox_var.get(),
            "scan_subfolders": self.scan_subfolders_var.get(),
            "exclude_special": self.exclude_special_var.get(),
            "rules": self.rules,
            "existing_folders": self.existing_folders
        }
        
        try:
            with open(self.config_file, 'w', encoding='utf-8') as f:
                json.dump(settings, f, indent=4, ensure_ascii=False)
            
            # Sauvegarder aussi les cha√Ænes
            self.save_chains()
            
        except Exception as e:
            self.log(f"‚ö†Ô∏è Impossible de sauvegarder les param√®tres: {str(e)}", "warning")
    
    def load_settings(self):
        """Charger les param√®tres sauvegard√©s"""
        try:
            if self.config_file.exists():
                with open(self.config_file, 'r', encoding='utf-8') as f:
                    settings = json.load(f)
                
                # Charger les param√®tres
                self.email_var.set(settings.get("email", ""))
                self.server_var.set(settings.get("server", ""))
                self.port_var.set(settings.get("port", "993"))
                self.preserve_unread_var.set(settings.get("preserve_unread", True))
                self.cc_enabled_var.set(settings.get("cc_enabled", True))
                self.cc_folder_var.set(settings.get("cc_folder", "EN_COPIE"))
                self.cc_mark_read_after_var.set(settings.get("cc_mark_read_after", False))
                self.cc_skip_important_var.set(settings.get("cc_skip_important", True))
                self.cc_skip_recent_var.set(settings.get("cc_skip_recent", False))
                self.max_emails_var.set(settings.get("max_emails", "100"))
                self.processing_mode_var.set(settings.get("processing_mode", "peek"))
                self.filter_unread_only_var.set(settings.get("filter_unread_only", False))
                self.filter_date_var.set(settings.get("filter_date", False))
                self.filter_days_var.set(settings.get("filter_days", "7"))
                self.dry_run_var.set(settings.get("dry_run", False))
                self.backup_before_move_var.set(settings.get("backup_before_move", False))
                self.confirm_actions_var.set(settings.get("confirm_actions", False))
                self.batch_size_var.set(settings.get("batch_size", "50"))
                self.parallel_processing_var.set(settings.get("parallel_processing", False))
                self.include_inbox_var.set(settings.get("include_inbox", True))
                self.scan_subfolders_var.set(settings.get("scan_subfolders", False))
                self.exclude_special_var.set(settings.get("exclude_special", True))
                self.rules = settings.get("rules", [])
                self.existing_folders = settings.get("existing_folders", [])
                
                # Mettre √† jour les widgets
                if self.existing_folders:
                    self.folder_dropdown['values'] = self.existing_folders
                    self.folders_listbox.delete(0, tk.END)
                    for folder in self.existing_folders:
                        self.folders_listbox.insert(tk.END, folder)
                
                self.sort_rules_by_priority()
                self.refresh_rules_tree()
                self.refresh_available_rules()
                
                if self.filter_date_var.get():
                    self.days_spinbox.config(state='normal')
                
                # Charger les cha√Ænes
                self.load_chains()
                
                self.log("‚úÖ Param√®tres charg√©s depuis la derni√®re session", "success")
        except Exception as e:
            self.log(f"‚ÑπÔ∏è Premi√®re utilisation ou erreur de chargement: {str(e)[:50]}", "info")
    
    def on_closing(self):
        """Gestion de la fermeture"""
        if self.is_running:
            if messagebox.askokcancel("Quitter", "Une analyse est en cours. Voulez-vous vraiment quitter?"):
                self.is_running = False
                self.save_settings()
                self.root.destroy()
        else:
            self.save_settings()
            self.root.destroy()
    
    def run(self):
        """Lancer l'application"""
        self.root.mainloop()

# === POINT D'ENTR√âE PRINCIPAL ===
def main():
    """Fonction principale pour lancer Email Manager V3"""
    app = EmailManager()
    app.run()

if __name__ == "__main__":
    main()